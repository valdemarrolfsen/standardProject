[
  {
    "description": "Updates all supplied activities on the getstream-io api",
    "tags": [
      {
        "title": "since",
        "description": "3.1.0",
        "lineNumber": 2
      },
      {
        "title": "param",
        "description": "list of activities to update",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "array"
        },
        "name": "activities"
      },
      {
        "title": "returns",
        "description": null,
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      },
      {
        "title": "name",
        "name": "activities"
      }
    ],
    "loc": {
      "start": {
        "line": 467,
        "column": 4
      },
      "end": {
        "line": 472,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 473,
          "column": 4
        },
        "end": {
          "line": 475,
          "column": 5
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/client.js",
      "code": "{\n    /**\n     * Updates all supplied activities on the getstream-io api\n     * @since  3.1.0\n     * @param  {array} activities list of activities to update\n     * @return {Promise}\n     */\n    if (! (activities instanceof Array)) {\n      throw new TypeError('The activities argument should be an Array');\n    }\n\n    var authToken = signing.JWTScopeToken(this.apiSecret, 'activities', '*', { feedId: '*', expireTokens: this.expireTokens });\n\n    var data = {\n      activities: activities,\n    };\n\n    return this.post({\n      url: 'activities/',\n      body: data,\n      signature: authToken,\n    }, callback);\n  }"
    },
    "params": [
      {
        "title": "param",
        "description": "list of activities to update",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "array"
        },
        "name": "activities"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": null,
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      }
    ],
    "name": "activities",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "activities"
    ]
  },
  {
    "description": "Adds the given activities to the feed and calls the specified callback",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 2,
        "name": "addActivities"
      },
      {
        "title": "memberof",
        "description": "StreamFeed.prototype",
        "lineNumber": 3
      },
      {
        "title": "param",
        "description": "Array of activities to add",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "activities"
      },
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "requestCallback"
        },
        "name": "callback"
      },
      {
        "title": "returns",
        "description": "XHR request object",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      },
      {
        "title": "name",
        "name": "activities"
      }
    ],
    "loc": {
      "start": {
        "line": 84,
        "column": 4
      },
      "end": {
        "line": 91,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 92,
          "column": 4
        },
        "end": {
          "line": 92,
          "column": 56
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/feed.js",
      "code": "{\n    /**\n     * Adds the given activities to the feed and calls the specified callback\n     * @method addActivities\n     * @memberof StreamFeed.prototype\n     * @param  {Array}   activities Array of activities to add\n     * @param  {requestCallback} callback   Callback to call on completion\n     * @return {Promise}               XHR request object\n     */\n    activities = this.client.signActivities(activities);\n    var data = {\n      activities: activities,\n    };\n    var xhr = this.client.post({\n      url: 'feed/' + this.feedUrl + '/',\n      body: data,\n      signature: this.signature,\n    }, callback);\n    return xhr;\n  }"
    },
    "memberof": "StreamFeed.prototype",
    "params": [
      {
        "title": "param",
        "description": "Array of activities to add",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "Array"
        },
        "name": "activities"
      },
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "requestCallback"
        },
        "name": "callback"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "XHR request object",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      }
    ],
    "name": "activities",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "activities"
    ]
  },
  {
    "description": "Adds the given activity to the feed and\ncalls the specified callback",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 3,
        "name": "addActivity"
      },
      {
        "title": "memberof",
        "description": "StreamFeed.prototype",
        "lineNumber": 4
      },
      {
        "title": "param",
        "description": "The activity to add",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "activity"
      },
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "requestCallback"
        },
        "name": "callback"
      },
      {
        "title": "returns",
        "description": "Promise object",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      },
      {
        "title": "name",
        "name": "activity"
      }
    ],
    "loc": {
      "start": {
        "line": 39,
        "column": 4
      },
      "end": {
        "line": 47,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 48,
          "column": 4
        },
        "end": {
          "line": 48,
          "column": 50
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/feed.js",
      "code": "{\n    /**\n     * Adds the given activity to the feed and\n     * calls the specified callback\n     * @method addActivity\n     * @memberof StreamFeed.prototype\n     * @param {object} activity - The activity to add\n     * @param {requestCallback} callback - Callback to call on completion\n     * @return {Promise} Promise object\n     */\n    activity = this.client.signActivity(activity);\n\n    return this.client.post({\n      url: 'feed/' + this.feedUrl + '/',\n      body: activity,\n      signature: this.signature,\n    }, callback);\n  }"
    },
    "memberof": "StreamFeed.prototype",
    "params": [
      {
        "title": "param",
        "description": "The activity to add",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "activity"
      },
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "requestCallback"
        },
        "name": "callback"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "Promise object",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      }
    ],
    "name": "activity",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "activity"
    ]
  },
  {
    "description": "Initialize a client",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 2,
        "name": "intialize"
      },
      {
        "title": "memberof",
        "description": "StreamClient.prototype",
        "lineNumber": 3
      },
      {
        "title": "param",
        "description": "the api key",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "apiKey"
      },
      {
        "title": "param",
        "description": "the api secret",
        "lineNumber": 5,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "apiSecret"
      },
      {
        "title": "param",
        "description": "id of the app",
        "lineNumber": 6,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "appId"
      },
      {
        "title": "param",
        "description": "additional options",
        "lineNumber": 7,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "object"
          }
        },
        "name": "options",
        "properties": [
          {
            "title": "param",
            "description": "which data center to use",
            "lineNumber": 8,
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            "name": "options.location"
          },
          {
            "title": "param",
            "description": "whether to use a JWT timestamp field (i.e. iat)",
            "lineNumber": 9,
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            "name": "options.expireTokens",
            "default": "false"
          }
        ]
      },
      {
        "title": "param",
        "description": "which data center to use",
        "lineNumber": 8,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "options.location"
      },
      {
        "title": "param",
        "description": "whether to use a JWT timestamp field (i.e. iat)",
        "lineNumber": 9,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "options.expireTokens",
        "default": "false"
      },
      {
        "title": "example",
        "description": "<caption>initialize is not directly called by via stream.connect, ie:</caption>\nstream.connect(apiKey, apiSecret)",
        "lineNumber": 10
      },
      {
        "title": "example",
        "description": "<caption>secret is optional and only used in server side mode</caption>\nstream.connect(apiKey, null, appId);",
        "lineNumber": 12
      },
      {
        "title": "name",
        "name": "apiKey"
      }
    ],
    "loc": {
      "start": {
        "line": 32,
        "column": 4
      },
      "end": {
        "line": 46,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 47,
          "column": 4
        },
        "end": {
          "line": 47,
          "column": 25
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/client.js",
      "code": "{\n    /**\n     * Initialize a client\n     * @method intialize\n     * @memberof StreamClient.prototype\n     * @param {string} apiKey - the api key\n     * @param {string} [apiSecret] - the api secret\n     * @param {string} [appId] - id of the app\n     * @param {object} [options] - additional options\n     * @param {string} [options.location] - which data center to use\n     * @param {boolean} [options.expireTokens=false] - whether to use a JWT timestamp field (i.e. iat)\n     * @example <caption>initialize is not directly called by via stream.connect, ie:</caption>\n     * stream.connect(apiKey, apiSecret)\n     * @example <caption>secret is optional and only used in server side mode</caption>\n     * stream.connect(apiKey, null, appId);\n     */\n    this.apiKey = apiKey;\n    this.apiSecret = apiSecret;\n    this.appId = appId;\n    this.options = options || {};\n    this.version = this.options.version || 'v1.0';\n    this.fayeUrl = this.options.fayeUrl || 'https://faye.getstream.io/faye';\n    this.fayeClient = null;\n    // track a source name for the api calls, ie get started or databrowser\n    this.group = this.options.group || 'unspecified';\n    // track subscriptions made on feeds created by this client\n    this.subscriptions = {};\n    this.expireTokens = this.options.expireTokens ? this.options.expireTokens : false;\n    // which data center to use\n    this.location = this.options.location;\n    if (this.location) {\n      this.baseUrl = 'https://' + this.location + '-api.getstream.io/api/';\n    }\n\n    if (typeof (process) !== 'undefined' && process.env.LOCAL) {\n      this.baseUrl = 'http://localhost:8000/api/';\n    }\n\n    if (typeof (process) !== 'undefined' && process.env.LOCAL_FAYE) {\n      this.fayeUrl = 'http://localhost:9999/faye/';\n    }\n\n    this.handlers = {};\n    this.browser = typeof (window) !== 'undefined';\n    this.node = !this.browser;\n\n    if (this.browser && this.apiSecret) {\n      throw new errors.FeedError('You are publicly sharing your private key. Dont use the private key while in the browser.');\n    }\n  }"
    },
    "memberof": "StreamClient.prototype",
    "params": [
      {
        "title": "param",
        "description": "the api key",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "apiKey"
      },
      {
        "title": "param",
        "description": "the api secret",
        "lineNumber": 5,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "apiSecret"
      },
      {
        "title": "param",
        "description": "id of the app",
        "lineNumber": 6,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "appId"
      },
      {
        "title": "param",
        "description": "additional options",
        "lineNumber": 7,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "object"
          }
        },
        "name": "options",
        "properties": [
          {
            "title": "param",
            "description": "which data center to use",
            "lineNumber": 8,
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            "name": "options.location"
          },
          {
            "title": "param",
            "description": "whether to use a JWT timestamp field (i.e. iat)",
            "lineNumber": 9,
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            "name": "options.expireTokens",
            "default": "false"
          }
        ]
      }
    ],
    "examples": [
      "&lt;caption&gt;initialize is not directly called by via stream.connect, ie:<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">caption</span>&gt;</span>\nstream.connect(apiKey, apiSecret)</span>",
      "&lt;caption&gt;secret is optional and only used in server side mode&lt;/caption&gt;\nstream.connect(apiKey, null, appId);"
    ],
    "name": "apiKey",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "apiKey"
    ]
  },
  {
    "description": "Subscribes to any changes in the feed, return a promise",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 2,
        "name": "subscribe"
      },
      {
        "title": "memberof",
        "description": "StreamFeed.prototype",
        "lineNumber": 3
      },
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "callback"
      },
      {
        "title": "returns",
        "description": "Promise object",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      },
      {
        "title": "example",
        "description": "feed.subscribe(callback).then(function(){\n\t\tconsole.log('we are now listening to changes');\n});",
        "lineNumber": 6
      },
      {
        "title": "name",
        "name": "appId"
      }
    ],
    "loc": {
      "start": {
        "line": 254,
        "column": 4
      },
      "end": {
        "line": 264,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 265,
          "column": 4
        },
        "end": {
          "line": 267,
          "column": 5
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/feed.js",
      "code": "{\n    /**\n     * Subscribes to any changes in the feed, return a promise\n     * @method subscribe\n     * @memberof StreamFeed.prototype\n     * @param  {function} callback Callback to call on completion\n     * @return {Promise}           Promise object\n     * @example\n     * feed.subscribe(callback).then(function(){\n     * \t\tconsole.log('we are now listening to changes');\n     * });\n     */\n    if (!this.client.appId) {\n      throw new errors.SiteError('Missing app id, which is needed to subscribe, use var client = stream.connect(key, secret, appId);');\n    }\n\n    this.client.subscriptions['/' + this.notificationChannel] = {\n      token: this.token,\n      userId: this.notificationChannel,\n    };\n\n    return this.getFayeClient().subscribe('/' + this.notificationChannel, callback);\n  }"
    },
    "memberof": "StreamFeed.prototype",
    "params": [
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "callback"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "Promise object",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      }
    ],
    "examples": [
      "feed.subscribe(callback).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n\t\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'we are now listening to changes'</span>);\n});"
    ],
    "name": "appId",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "appId"
    ]
  },
  {
    "description": "Initialize a feed object",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 2,
        "name": "intialize"
      },
      {
        "title": "memberof",
        "description": "StreamFeed.prototype",
        "lineNumber": 3
      },
      {
        "title": "param",
        "description": "The stream client this feed is constructed from",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "StreamClient"
        },
        "name": "client"
      },
      {
        "title": "param",
        "description": "The feed slug",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "feedSlug"
      },
      {
        "title": "param",
        "description": "The user id",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "userId"
      },
      {
        "title": "param",
        "description": "The authentication token",
        "lineNumber": 7,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "token"
      },
      {
        "title": "name",
        "name": "client"
      }
    ],
    "loc": {
      "start": {
        "line": 15,
        "column": 4
      },
      "end": {
        "line": 23,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 24,
          "column": 4
        },
        "end": {
          "line": 24,
          "column": 25
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/feed.js",
      "code": "{\n    /**\n     * Initialize a feed object\n     * @method intialize\n     * @memberof StreamFeed.prototype\n     * @param {StreamClient} client - The stream client this feed is constructed from\n     * @param {string} feedSlug - The feed slug\n     * @param {string} userId - The user id\n     * @param {string} [token] - The authentication token\n     */\n    this.client = client;\n    this.slug = feedSlug;\n    this.userId = userId;\n    this.id = this.slug + ':' + this.userId;\n    this.token = token;\n\n    this.feedUrl = this.id.replace(':', '/');\n    this.feedTogether = this.id.replace(':', '');\n    this.signature = this.feedTogether + ' ' + this.token;\n\n    // faye setup\n    this.notificationChannel = 'site-' + this.client.appId + '-feed-' + this.feedTogether;\n  }"
    },
    "memberof": "StreamFeed.prototype",
    "params": [
      {
        "title": "param",
        "description": "The stream client this feed is constructed from",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "StreamClient"
        },
        "name": "client"
      },
      {
        "title": "param",
        "description": "The feed slug",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "feedSlug"
      },
      {
        "title": "param",
        "description": "The user id",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "userId"
      },
      {
        "title": "param",
        "description": "The authentication token",
        "lineNumber": 7,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "token"
      }
    ],
    "name": "client",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "client"
    ]
  },
  {
    "description": "Get the current user agent",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 2,
        "name": "userAgent"
      },
      {
        "title": "memberof",
        "description": "StreamClient.prototype",
        "lineNumber": 3
      },
      {
        "title": "returns",
        "description": "current user agent",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "title": "name",
        "name": "description"
      }
    ],
    "loc": {
      "start": {
        "line": 185,
        "column": 4
      },
      "end": {
        "line": 190,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 191,
          "column": 4
        },
        "end": {
          "line": 191,
          "column": 55
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/client.js",
      "code": "{\n    /**\n     * Get the current user agent\n     * @method userAgent\n     * @memberof StreamClient.prototype\n     * @return {string} current user agent\n     */\n    var description = (this.node) ? 'node' : 'browser';\n    // TODO: get the version here in a way which works in both and browserify\n    var version = 'unknown';\n    return 'stream-javascript-client-' + description + '-' + version;\n  }"
    },
    "memberof": "StreamClient.prototype",
    "returns": [
      {
        "title": "returns",
        "description": "current user agent",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "name": "description",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "description"
    ]
  },
  {
    "description": "Support for global event callbacks\nThis is useful for generic error and loading handling",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 3,
        "name": "on"
      },
      {
        "title": "memberof",
        "description": "StreamClient.prototype",
        "lineNumber": 4
      },
      {
        "title": "param",
        "description": "Name of the event",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "event"
      },
      {
        "title": "param",
        "description": "Function that is called when the event fires",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "callback"
      },
      {
        "title": "example",
        "description": "client.on('request', callback);\nclient.on('response', callback);",
        "lineNumber": 7
      },
      {
        "title": "name",
        "name": "event"
      }
    ],
    "loc": {
      "start": {
        "line": 83,
        "column": 4
      },
      "end": {
        "line": 93,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 94,
          "column": 4
        },
        "end": {
          "line": 94,
          "column": 36
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/client.js",
      "code": "{\n    /**\n     * Support for global event callbacks\n     * This is useful for generic error and loading handling\n     * @method on\n     * @memberof StreamClient.prototype\n     * @param {string} event - Name of the event\n     * @param {function} callback - Function that is called when the event fires\n     * @example\n     * client.on('request', callback);\n     * client.on('response', callback);\n     */\n    this.handlers[event] = callback;\n  }"
    },
    "memberof": "StreamClient.prototype",
    "params": [
      {
        "title": "param",
        "description": "Name of the event",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "event"
      },
      {
        "title": "param",
        "description": "Function that is called when the event fires",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "function"
        },
        "name": "callback"
      }
    ],
    "examples": [
      "client.on(<span class=\"hljs-string\">'request'</span>, callback);\nclient.on(<span class=\"hljs-string\">'response'</span>, callback);"
    ],
    "name": "event",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "event"
    ]
  },
  {
    "description": "Returns a token that allows read and write operations",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 3,
        "name": "getReadWriteToken"
      },
      {
        "title": "memberof",
        "description": "StreamClient.prototype",
        "lineNumber": 4
      },
      {
        "title": "param",
        "description": "The feed slug to get a read only token for",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "feedSlug"
      },
      {
        "title": "param",
        "description": "The user identifier",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "userId"
      },
      {
        "title": "returns",
        "description": "token",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "title": "example",
        "description": "client.getReadWriteToken('user', '1');",
        "lineNumber": 8
      },
      {
        "title": "name",
        "name": "feedId"
      }
    ],
    "loc": {
      "start": {
        "line": 214,
        "column": 4
      },
      "end": {
        "line": 224,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 225,
          "column": 4
        },
        "end": {
          "line": 225,
          "column": 40
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/client.js",
      "code": "{\n    /**\n     * Returns a token that allows read and write operations\n     *\n     * @method getReadWriteToken\n     * @memberof StreamClient.prototype\n     * @param {string} feedSlug - The feed slug to get a read only token for\n     * @param {string} userId - The user identifier\n     * @return {string} token\n     * @example\n     * client.getReadWriteToken('user', '1');\n     */\n    var feedId = '' + feedSlug + userId;\n    return signing.JWTScopeToken(this.apiSecret, '*', '*', { feedId: feedId, expireTokens: this.expireTokens });\n  }"
    },
    "memberof": "StreamClient.prototype",
    "params": [
      {
        "title": "param",
        "description": "The feed slug to get a read only token for",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "feedSlug"
      },
      {
        "title": "param",
        "description": "The user identifier",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "userId"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "token",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "examples": [
      "client.getReadWriteToken(<span class=\"hljs-string\">'user'</span>, <span class=\"hljs-string\">'1'</span>);"
    ],
    "name": "feedId",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "feedId"
    ]
  },
  {
    "description": "Returns a token that allows only read operations",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 3,
        "name": "getReadOnlyToken"
      },
      {
        "title": "memberof",
        "description": "StreamClient.prototype",
        "lineNumber": 4
      },
      {
        "title": "param",
        "description": "The feed slug to get a read only token for",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "feedSlug"
      },
      {
        "title": "param",
        "description": "The user identifier",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "userId"
      },
      {
        "title": "returns",
        "description": "token",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "title": "example",
        "description": "client.getReadOnlyToken('user', '1');",
        "lineNumber": 8
      },
      {
        "title": "name",
        "name": "feedId"
      }
    ],
    "loc": {
      "start": {
        "line": 198,
        "column": 4
      },
      "end": {
        "line": 208,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 209,
          "column": 4
        },
        "end": {
          "line": 209,
          "column": 40
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/client.js",
      "code": "{\n    /**\n     * Returns a token that allows only read operations\n     *\n     * @method getReadOnlyToken\n     * @memberof StreamClient.prototype\n     * @param {string} feedSlug - The feed slug to get a read only token for\n     * @param {string} userId - The user identifier\n     * @return {string} token\n     * @example\n     * client.getReadOnlyToken('user', '1');\n     */\n    var feedId = '' + feedSlug + userId;\n    return signing.JWTScopeToken(this.apiSecret, '*', 'read', { feedId: feedId, expireTokens: this.expireTokens });\n  }"
    },
    "memberof": "StreamClient.prototype",
    "params": [
      {
        "title": "param",
        "description": "The feed slug to get a read only token for",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "feedSlug"
      },
      {
        "title": "param",
        "description": "The user identifier",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "userId"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "token",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "examples": [
      "client.getReadOnlyToken(<span class=\"hljs-string\">'user'</span>, <span class=\"hljs-string\">'1'</span>);"
    ],
    "name": "feedId",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "feedId"
    ]
  },
  {
    "description": "Removes the activity by activityId",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 2,
        "name": "removeActivity"
      },
      {
        "title": "memberof",
        "description": "StreamFeed.prototype",
        "lineNumber": 3
      },
      {
        "title": "param",
        "description": "Identifier of activity to remove",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "activityId"
      },
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "requestCallback"
        },
        "name": "callback"
      },
      {
        "title": "returns",
        "description": "Promise object",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      },
      {
        "title": "example",
        "description": "feed.removeActivity(activityId);",
        "lineNumber": 7
      },
      {
        "title": "example",
        "description": "feed.removeActivity({'foreign_id': foreignId});",
        "lineNumber": 9
      },
      {
        "title": "name",
        "name": "identifier"
      }
    ],
    "loc": {
      "start": {
        "line": 58,
        "column": 4
      },
      "end": {
        "line": 69,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 70,
          "column": 4
        },
        "end": {
          "line": 70,
          "column": 80
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/feed.js",
      "code": "{\n    /**\n     * Removes the activity by activityId\n     * @method removeActivity\n     * @memberof StreamFeed.prototype\n     * @param  {string}   activityId Identifier of activity to remove\n     * @param  {requestCallback} callback   Callback to call on completion\n     * @return {Promise} Promise object\n     * @example\n     * feed.removeActivity(activityId);\n     * @example\n     * feed.removeActivity({'foreign_id': foreignId});\n     */\n    var identifier = (activityId.foreignId) ? activityId.foreignId : activityId;\n    var params = {};\n    if (activityId.foreignId) {\n      params['foreign_id'] = '1';\n    }\n\n    return this.client.delete({\n      url: 'feed/' + this.feedUrl + '/' + identifier + '/',\n      qs: params,\n      signature: this.signature,\n    }, callback);\n  }"
    },
    "memberof": "StreamFeed.prototype",
    "params": [
      {
        "title": "param",
        "description": "Identifier of activity to remove",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "activityId"
      },
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "requestCallback"
        },
        "name": "callback"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "Promise object",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      }
    ],
    "examples": [
      "feed.removeActivity(activityId);",
      "feed.removeActivity({<span class=\"hljs-string\">'foreign_id'</span>: foreignId});"
    ],
    "name": "identifier",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "identifier"
    ]
  },
  {
    "description": "Remove one or more event handlers",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 2,
        "name": "off"
      },
      {
        "title": "memberof",
        "description": "StreamClient.prototype",
        "lineNumber": 3
      },
      {
        "title": "param",
        "description": "Name of the handler",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "key"
      },
      {
        "title": "example",
        "description": "client.off() removes all handlers\nclient.off(name) removes the specified handler",
        "lineNumber": 5
      },
      {
        "title": "name",
        "name": "key"
      }
    ],
    "loc": {
      "start": {
        "line": 98,
        "column": 4
      },
      "end": {
        "line": 106,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 107,
          "column": 4
        },
        "end": {
          "line": 111,
          "column": 5
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/client.js",
      "code": "{\n    /**\n     * Remove one or more event handlers\n     * @method off\n     * @memberof StreamClient.prototype\n     * @param {string} [key] - Name of the handler\n     * @example\n     * client.off() removes all handlers\n     * client.off(name) removes the specified handler\n     */\n    if (key === undefined) {\n      this.handlers = {};\n    } else {\n      delete this.handlers[key];\n    }\n  }"
    },
    "memberof": "StreamClient.prototype",
    "params": [
      {
        "title": "param",
        "description": "Name of the handler",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "key"
      }
    ],
    "examples": [
      "client.off() removes all handlers\nclient.off(name) removes the specified handler"
    ],
    "name": "key",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "key"
    ]
  },
  {
    "description": "Reads the feed",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 2,
        "name": "get"
      },
      {
        "title": "memberof",
        "description": "StreamFeed.prototype",
        "lineNumber": 3
      },
      {
        "title": "param",
        "description": "Additional options",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "options"
      },
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "requestCallback"
        },
        "name": "callback"
      },
      {
        "title": "returns",
        "description": "Promise object",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      },
      {
        "title": "example",
        "description": "feed.get({limit: 10, id_lte: 'activity-id'})",
        "lineNumber": 7
      },
      {
        "title": "example",
        "description": "feed.get({limit: 10, mark_seen: true})",
        "lineNumber": 8
      },
      {
        "title": "name",
        "name": "options"
      }
    ],
    "loc": {
      "start": {
        "line": 217,
        "column": 4
      },
      "end": {
        "line": 226,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 227,
          "column": 4
        },
        "end": {
          "line": 229,
          "column": 5
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/feed.js",
      "code": "{\n    /**\n     * Reads the feed\n     * @method get\n     * @memberof StreamFeed.prototype\n     * @param  {object}   options  Additional options\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example feed.get({limit: 10, id_lte: 'activity-id'})\n     * @example feed.get({limit: 10, mark_seen: true})\n     */\n    if (options && options['mark_read'] && options['mark_read'].join) {\n      options['mark_read'] = options['mark_read'].join(',');\n    }\n\n    if (options && options['mark_seen'] && options['mark_seen'].join) {\n      options['mark_seen'] = options['mark_seen'].join(',');\n    }\n\n    return this.client.get({\n      url: 'feed/' + this.feedUrl + '/',\n      qs: options,\n      signature: this.signature,\n    }, callback);\n  }"
    },
    "memberof": "StreamFeed.prototype",
    "params": [
      {
        "title": "param",
        "description": "Additional options",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "options"
      },
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "requestCallback"
        },
        "name": "callback"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "Promise object",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      }
    ],
    "examples": [
      "feed.get({limit: <span class=\"hljs-number\">10</span>, id_lte: <span class=\"hljs-string\">'activity-id'</span>})",
      "feed.get({limit: <span class=\"hljs-number\">10</span>, mark_seen: <span class=\"hljs-literal\">true</span>})"
    ],
    "name": "options",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "options"
    ]
  },
  {
    "description": "List the followers of this feed",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 2,
        "name": "followers"
      },
      {
        "title": "memberof",
        "description": "StreamFeed.prototype",
        "lineNumber": 3
      },
      {
        "title": "param",
        "description": "Additional options",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "options",
        "properties": [
          {
            "title": "param",
            "description": "Filter to apply on search operation",
            "lineNumber": 5,
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "options.filter"
          }
        ]
      },
      {
        "title": "param",
        "description": "Filter to apply on search operation",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "options.filter"
      },
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "requestCallback"
        },
        "name": "callback"
      },
      {
        "title": "returns",
        "description": "Promise object",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      },
      {
        "title": "example",
        "description": "feed.followers({limit:10, filter: ['user:1', 'user:2']}, callback);",
        "lineNumber": 8
      },
      {
        "title": "name",
        "name": "options"
      }
    ],
    "loc": {
      "start": {
        "line": 194,
        "column": 4
      },
      "end": {
        "line": 204,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 205,
          "column": 4
        },
        "end": {
          "line": 207,
          "column": 5
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/feed.js",
      "code": "{\n    /**\n     * List the followers of this feed\n     * @method followers\n     * @memberof StreamFeed.prototype\n     * @param  {object}   options  Additional options\n     * @param  {string}   options.filter Filter to apply on search operation\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example\n     * feed.followers({limit:10, filter: ['user:1', 'user:2']}, callback);\n     */\n    if (options !== undefined && options.filter) {\n      options.filter = options.filter.join(',');\n    }\n\n    return this.client.get({\n      url: 'feed/' + this.feedUrl + '/followers/',\n      qs: options,\n      signature: this.signature,\n    }, callback);\n  }"
    },
    "memberof": "StreamFeed.prototype",
    "params": [
      {
        "title": "param",
        "description": "Additional options",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "options",
        "properties": [
          {
            "title": "param",
            "description": "Filter to apply on search operation",
            "lineNumber": 5,
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "options.filter"
          }
        ]
      },
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "requestCallback"
        },
        "name": "callback"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "Promise object",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      }
    ],
    "examples": [
      "feed.followers({limit:<span class=\"hljs-number\">10</span>, filter: [<span class=\"hljs-string\">'user:1'</span>, <span class=\"hljs-string\">'user:2'</span>]}, callback);"
    ],
    "name": "options",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "options"
    ]
  },
  {
    "description": "List which feeds this feed is following",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 2,
        "name": "following"
      },
      {
        "title": "memberof",
        "description": "StreamFeed.prototype",
        "lineNumber": 3
      },
      {
        "title": "param",
        "description": "Additional options",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "options",
        "properties": [
          {
            "title": "param",
            "description": "Filter to apply on search operation",
            "lineNumber": 5,
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "options.filter"
          }
        ]
      },
      {
        "title": "param",
        "description": "Filter to apply on search operation",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "options.filter"
      },
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "requestCallback"
        },
        "name": "callback"
      },
      {
        "title": "returns",
        "description": "Promise object",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      },
      {
        "title": "example",
        "description": "feed.following({limit:10, filter: ['user:1', 'user:2']}, callback);",
        "lineNumber": 8
      },
      {
        "title": "name",
        "name": "options"
      }
    ],
    "loc": {
      "start": {
        "line": 172,
        "column": 4
      },
      "end": {
        "line": 181,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 182,
          "column": 4
        },
        "end": {
          "line": 184,
          "column": 5
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/feed.js",
      "code": "{\n    /**\n     * List which feeds this feed is following\n     * @method following\n     * @memberof StreamFeed.prototype\n     * @param  {object}   options  Additional options\n     * @param  {string}   options.filter Filter to apply on search operation\n     * @param  {requestCallback} callback Callback to call on completion\n     * @return {Promise} Promise object\n     * @example feed.following({limit:10, filter: ['user:1', 'user:2']}, callback);\n     */\n    if (options !== undefined && options.filter) {\n      options.filter = options.filter.join(',');\n    }\n\n    return this.client.get({\n      url: 'feed/' + this.feedUrl + '/following/',\n      qs: options,\n      signature: this.signature,\n    }, callback);\n  }"
    },
    "memberof": "StreamFeed.prototype",
    "params": [
      {
        "title": "param",
        "description": "Additional options",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "options",
        "properties": [
          {
            "title": "param",
            "description": "Filter to apply on search operation",
            "lineNumber": 5,
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "options.filter"
          }
        ]
      },
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "requestCallback"
        },
        "name": "callback"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "Promise object",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      }
    ],
    "examples": [
      "feed.following({limit:<span class=\"hljs-number\">10</span>, filter: [<span class=\"hljs-string\">'user:1'</span>, <span class=\"hljs-string\">'user:2'</span>]}, callback);"
    ],
    "name": "options",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "options"
    ]
  },
  {
    "description": "Returns a feed object for the given feed id and token",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 2,
        "name": "feed"
      },
      {
        "title": "memberof",
        "description": "StreamClient.prototype",
        "lineNumber": 3
      },
      {
        "title": "param",
        "description": "The feed slug",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "feedSlug"
      },
      {
        "title": "param",
        "description": "The user identifier",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "userId"
      },
      {
        "title": "param",
        "description": "The token",
        "lineNumber": 6,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "token"
      },
      {
        "title": "param",
        "description": "The site identifier",
        "lineNumber": 7,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "siteId"
      },
      {
        "title": "param",
        "description": "Additional function options",
        "lineNumber": 8,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "object"
          }
        },
        "name": "options",
        "properties": [
          {
            "title": "param",
            "description": "A boolean indicating whether to generate a read only token for this feed",
            "lineNumber": 9,
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            "name": "options.readOnly"
          }
        ]
      },
      {
        "title": "param",
        "description": "A boolean indicating whether to generate a read only token for this feed",
        "lineNumber": 9,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "name": "options.readOnly"
      },
      {
        "title": "returns",
        "description": null,
        "lineNumber": 10,
        "type": {
          "type": "NameExpression",
          "name": "StreamFeed"
        }
      },
      {
        "title": "example",
        "description": "client.feed('user', '1', 'token2');",
        "lineNumber": 11
      },
      {
        "title": "name",
        "name": "options"
      }
    ],
    "loc": {
      "start": {
        "line": 230,
        "column": 4
      },
      "end": {
        "line": 243,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 245,
          "column": 4
        },
        "end": {
          "line": 245,
          "column": 28
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/client.js",
      "code": "{\n    /**\n     * Returns a feed object for the given feed id and token\n     * @method feed\n     * @memberof StreamClient.prototype\n     * @param {string} feedSlug - The feed slug\n     * @param {string} userId - The user identifier\n     * @param {string} [token] - The token\n     * @param {string} [siteId] - The site identifier\n     * @param {object} [options] - Additional function options\n     * @param {boolean} [options.readOnly] - A boolean indicating whether to generate a read only token for this feed\n     * @return {StreamFeed}\n     * @example\n     * client.feed('user', '1', 'token2');\n     */\n\n    options = options || {};\n\n    if (!feedSlug || !userId) {\n      throw new errors.FeedError('Please provide a feed slug and user id, ie client.feed(\"user\", \"1\")');\n    }\n\n    if (feedSlug.indexOf(':') !== -1) {\n      throw new errors.FeedError('Please initialize the feed using client.feed(\"user\", \"1\") not client.feed(\"user:1\")');\n    }\n\n    utils.validateFeedSlug(feedSlug);\n    utils.validateUserId(userId);\n\n    // raise an error if there is no token\n    if (!this.apiSecret && !token) {\n      throw new errors.FeedError('Missing token, in client side mode please provide a feed secret');\n    }\n\n    // create the token in server side mode\n    if (this.apiSecret && !token) {\n      var feedId = '' + feedSlug + userId;\n      // use scoped token if read-only access is necessary\n      token = options.readOnly ? this.getReadOnlyToken(feedSlug, userId) : signing.sign(this.apiSecret, feedId);\n    }\n\n    var feed = new StreamFeed(this, feedSlug, userId, token, siteId);\n    return feed;\n  }"
    },
    "memberof": "StreamClient.prototype",
    "params": [
      {
        "title": "param",
        "description": "The feed slug",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "feedSlug"
      },
      {
        "title": "param",
        "description": "The user identifier",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "userId"
      },
      {
        "title": "param",
        "description": "The token",
        "lineNumber": 6,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "token"
      },
      {
        "title": "param",
        "description": "The site identifier",
        "lineNumber": 7,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "siteId"
      },
      {
        "title": "param",
        "description": "Additional function options",
        "lineNumber": 8,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "object"
          }
        },
        "name": "options",
        "properties": [
          {
            "title": "param",
            "description": "A boolean indicating whether to generate a read only token for this feed",
            "lineNumber": 9,
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            "name": "options.readOnly"
          }
        ]
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": null,
        "lineNumber": 10,
        "type": {
          "type": "NameExpression",
          "name": "StreamFeed"
        }
      }
    ],
    "examples": [
      "client.feed(<span class=\"hljs-string\">'user'</span>, <span class=\"hljs-string\">'1'</span>, <span class=\"hljs-string\">'token2'</span>);"
    ],
    "name": "options",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "options"
    ]
  },
  {
    "description": "Create StreamClient",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 2,
        "name": "connect"
      },
      {
        "title": "param",
        "description": "API key",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "apiKey"
      },
      {
        "title": "param",
        "description": "API secret (only use this on the server)",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "apiSecret"
      },
      {
        "title": "param",
        "description": "Application identifier",
        "lineNumber": 5,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "appId"
      },
      {
        "title": "param",
        "description": "Additional options",
        "lineNumber": 6,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "object"
          }
        },
        "name": "options",
        "properties": [
          {
            "title": "param",
            "description": "Datacenter location",
            "lineNumber": 7,
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            "name": "options.location"
          }
        ]
      },
      {
        "title": "param",
        "description": "Datacenter location",
        "lineNumber": 7,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "options.location"
      },
      {
        "title": "returns",
        "description": "StreamClient",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "StreamClient"
        }
      },
      {
        "title": "example",
        "description": "<caption>Basic usage</caption>\nstream.connect(apiKey, apiSecret);",
        "lineNumber": 9
      },
      {
        "title": "example",
        "description": "<caption>or if you want to be able to subscribe and listen</caption>\nstream.connect(apiKey, apiSecret, appId);",
        "lineNumber": 11
      },
      {
        "title": "example",
        "description": "<caption>or on Heroku</caption>\nstream.connect(streamURL);",
        "lineNumber": 13
      },
      {
        "title": "example",
        "description": "<caption>where streamURL looks like</caption>\n\"https://thierry:pass@gestream.io/?app=1\"",
        "lineNumber": 15
      },
      {
        "title": "name",
        "name": "process"
      }
    ],
    "loc": {
      "start": {
        "line": 11,
        "column": 2
      },
      "end": {
        "line": 28,
        "column": 5
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 29,
          "column": 2
        },
        "end": {
          "line": 42,
          "column": 3
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/getstream.js",
      "code": "{\n  /**\n   * Create StreamClient\n   * @method connect\n   * @param  {string} apiKey    API key\n   * @param  {string} [apiSecret] API secret (only use this on the server)\n   * @param  {string} [appId]     Application identifier\n   * @param  {object} [options]   Additional options\n   * @param  {string} [options.location] Datacenter location\n   * @return {StreamClient}     StreamClient\n   * @example <caption>Basic usage</caption>\n   * stream.connect(apiKey, apiSecret);\n   * @example <caption>or if you want to be able to subscribe and listen</caption>\n   * stream.connect(apiKey, apiSecret, appId);\n   * @example <caption>or on Heroku</caption>\n   * stream.connect(streamURL);\n   * @example <caption>where streamURL looks like</caption>\n   * \"https://thierry:pass@gestream.io/?app=1\"\n   */\n  if (typeof (process) !== 'undefined' && process.env.STREAM_URL && !apiKey) {\n    var parts = /https\\:\\/\\/(\\w+)\\:(\\w+)\\@([\\w-]*).*\\?app_id=(\\d+)/.exec(process.env.STREAM_URL);\n    apiKey = parts[1];\n    apiSecret = parts[2];\n    var location = parts[3];\n    appId = parts[4];\n    if (options === undefined) {\n      options = {};\n    }\n\n    if (location !== 'getstream') {\n      options.location = location;\n    }\n  }\n\n  return new StreamClient(apiKey, apiSecret, appId, options);\n}"
    },
    "params": [
      {
        "title": "param",
        "description": "API key",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "apiKey"
      },
      {
        "title": "param",
        "description": "API secret (only use this on the server)",
        "lineNumber": 4,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "apiSecret"
      },
      {
        "title": "param",
        "description": "Application identifier",
        "lineNumber": 5,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "appId"
      },
      {
        "title": "param",
        "description": "Additional options",
        "lineNumber": 6,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "object"
          }
        },
        "name": "options",
        "properties": [
          {
            "title": "param",
            "description": "Datacenter location",
            "lineNumber": 7,
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            "name": "options.location"
          }
        ]
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "StreamClient",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "StreamClient"
        }
      }
    ],
    "examples": [
      "&lt;caption&gt;Basic usage&lt;/caption&gt;\nstream.connect(apiKey, apiSecret);",
      "&lt;caption&gt;or if you want to be able to subscribe and listen&lt;/caption&gt;\nstream.connect(apiKey, apiSecret, appId);",
      "&lt;caption&gt;or on Heroku&lt;/caption&gt;\nstream.connect(streamURL);",
      "&lt;caption&gt;where streamURL looks like&lt;/caption&gt;\n\"https://thierry:pass@gestream.io/?app=1\""
    ],
    "name": "process",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "process"
    ]
  },
  {
    "description": "",
    "tags": [
      {
        "title": "callback",
        "description": "requestCallback",
        "lineNumber": 1
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 2,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "object"
          }
        },
        "name": "errors"
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "response"
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "body"
      },
      {
        "title": "name",
        "name": "StreamClient"
      },
      {
        "title": "kind",
        "kind": "function"
      }
    ],
    "loc": {
      "start": {
        "line": 12,
        "column": 0
      },
      "end": {
        "line": 17,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 19,
          "column": 0
        },
        "end": {
          "line": 25,
          "column": 2
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/client.js",
      "code": "var request = require('request');\nvar StreamFeed = require('./feed');\nvar signing = require('./signing');\nvar errors = require('./errors');\nvar utils = require('./utils');\nvar BatchOperations = require('./batch_operations');\nvar Promise = require('./promise');\nvar qs = require('qs');\nvar url = require('url');\nvar Faye = require('faye');\n\n/**\n * @callback requestCallback\n * @param {object} [errors]\n * @param {object} response\n * @param {object} body\n */\n\nvar StreamClient = function() {\n  /**\n   * Client to connect to Stream api\n   * @class StreamClient\n   */\n  this.initialize.apply(this, arguments);\n};\n\nStreamClient.prototype = {\n  baseUrl: 'https://api.getstream.io/api/',\n  baseAnalyticsUrl: 'https://analytics.getstream.io/analytics/',\n\n  initialize: function(apiKey, apiSecret, appId, options) {\n    /**\n     * Initialize a client\n     * @method intialize\n     * @memberof StreamClient.prototype\n     * @param {string} apiKey - the api key\n     * @param {string} [apiSecret] - the api secret\n     * @param {string} [appId] - id of the app\n     * @param {object} [options] - additional options\n     * @param {string} [options.location] - which data center to use\n     * @param {boolean} [options.expireTokens=false] - whether to use a JWT timestamp field (i.e. iat)\n     * @example <caption>initialize is not directly called by via stream.connect, ie:</caption>\n     * stream.connect(apiKey, apiSecret)\n     * @example <caption>secret is optional and only used in server side mode</caption>\n     * stream.connect(apiKey, null, appId);\n     */\n    this.apiKey = apiKey;\n    this.apiSecret = apiSecret;\n    this.appId = appId;\n    this.options = options || {};\n    this.version = this.options.version || 'v1.0';\n    this.fayeUrl = this.options.fayeUrl || 'https://faye.getstream.io/faye';\n    this.fayeClient = null;\n    // track a source name for the api calls, ie get started or databrowser\n    this.group = this.options.group || 'unspecified';\n    // track subscriptions made on feeds created by this client\n    this.subscriptions = {};\n    this.expireTokens = this.options.expireTokens ? this.options.expireTokens : false;\n    // which data center to use\n    this.location = this.options.location;\n    if (this.location) {\n      this.baseUrl = 'https://' + this.location + '-api.getstream.io/api/';\n    }\n\n    if (typeof (process) !== 'undefined' && process.env.LOCAL) {\n      this.baseUrl = 'http://localhost:8000/api/';\n    }\n\n    if (typeof (process) !== 'undefined' && process.env.LOCAL_FAYE) {\n      this.fayeUrl = 'http://localhost:9999/faye/';\n    }\n\n    this.handlers = {};\n    this.browser = typeof (window) !== 'undefined';\n    this.node = !this.browser;\n\n    if (this.browser && this.apiSecret) {\n      throw new errors.FeedError('You are publicly sharing your private key. Dont use the private key while in the browser.');\n    }\n  },\n\n  on: function(event, callback) {\n    /**\n     * Support for global event callbacks\n     * This is useful for generic error and loading handling\n     * @method on\n     * @memberof StreamClient.prototype\n     * @param {string} event - Name of the event\n     * @param {function} callback - Function that is called when the event fires\n     * @example\n     * client.on('request', callback);\n     * client.on('response', callback);\n     */\n    this.handlers[event] = callback;\n  },\n\n  off: function(key) {\n    /**\n     * Remove one or more event handlers\n     * @method off\n     * @memberof StreamClient.prototype\n     * @param {string} [key] - Name of the handler\n     * @example\n     * client.off() removes all handlers\n     * client.off(name) removes the specified handler\n     */\n    if (key === undefined) {\n      this.handlers = {};\n    } else {\n      delete this.handlers[key];\n    }\n  },\n\n  send: function() {\n    /**\n     * Call the given handler with the arguments\n     * @method send\n     * @memberof StreamClient.prototype\n     * @access private\n     */\n    var args = Array.prototype.slice.call(arguments);\n    var key = args[0];\n    args = args.slice(1);\n    if (this.handlers[key]) {\n      this.handlers[key].apply(this, args);\n    }\n  },\n\n  wrapPromiseTask: function(cb, fulfill, reject) {\n    /**\n     * Wrap a task to be used as a promise\n     * @method wrapPromiseTask\n     * @memberof StreamClient.prototype\n     * @private\n     * @param {requestCallback} cb\n     * @param {function} fulfill\n     * @param {function} reject\n     * @return {function}\n     */\n    var client = this;\n\n    var callback = this.wrapCallback(cb);\n    return function task(error, response, body) {\n      if (error) {\n        reject({\n          error: error,\n          response: response,\n        });\n      } else if (!/^2/.test('' + response.statusCode)) {\n        reject({\n          error: body,\n          response: response,\n        });\n      } else {\n        fulfill(body);\n      }\n\n      callback.apply(client, arguments);\n    };\n  },\n\n  wrapCallback: function(cb) {\n    /**\n     * Wrap callback for HTTP request\n     * @method wrapCallBack\n     * @memberof StreamClient.prototype\n     * @access private\n     */\n    var client = this;\n\n    function callback() {\n      // first hit the global callback, subsequently forward\n      var args = Array.prototype.slice.call(arguments);\n      var sendArgs = ['response'].concat(args);\n      client.send.apply(client, sendArgs);\n      if (cb !== undefined) {\n        cb.apply(client, args);\n      }\n    }\n\n    return callback;\n  },\n\n  userAgent: function() {\n    /**\n     * Get the current user agent\n     * @method userAgent\n     * @memberof StreamClient.prototype\n     * @return {string} current user agent\n     */\n    var description = (this.node) ? 'node' : 'browser';\n    // TODO: get the version here in a way which works in both and browserify\n    var version = 'unknown';\n    return 'stream-javascript-client-' + description + '-' + version;\n  },\n\n  getReadOnlyToken: function(feedSlug, userId) {\n    /**\n     * Returns a token that allows only read operations\n     *\n     * @method getReadOnlyToken\n     * @memberof StreamClient.prototype\n     * @param {string} feedSlug - The feed slug to get a read only token for\n     * @param {string} userId - The user identifier\n     * @return {string} token\n     * @example\n     * client.getReadOnlyToken('user', '1');\n     */\n    var feedId = '' + feedSlug + userId;\n    return signing.JWTScopeToken(this.apiSecret, '*', 'read', { feedId: feedId, expireTokens: this.expireTokens });\n  },\n\n  getReadWriteToken: function(feedSlug, userId) {\n    /**\n     * Returns a token that allows read and write operations\n     *\n     * @method getReadWriteToken\n     * @memberof StreamClient.prototype\n     * @param {string} feedSlug - The feed slug to get a read only token for\n     * @param {string} userId - The user identifier\n     * @return {string} token\n     * @example\n     * client.getReadWriteToken('user', '1');\n     */\n    var feedId = '' + feedSlug + userId;\n    return signing.JWTScopeToken(this.apiSecret, '*', '*', { feedId: feedId, expireTokens: this.expireTokens });\n  },\n\n  feed: function(feedSlug, userId, token, siteId, options) {\n    /**\n     * Returns a feed object for the given feed id and token\n     * @method feed\n     * @memberof StreamClient.prototype\n     * @param {string} feedSlug - The feed slug\n     * @param {string} userId - The user identifier\n     * @param {string} [token] - The token\n     * @param {string} [siteId] - The site identifier\n     * @param {object} [options] - Additional function options\n     * @param {boolean} [options.readOnly] - A boolean indicating whether to generate a read only token for this feed\n     * @return {StreamFeed}\n     * @example\n     * client.feed('user', '1', 'token2');\n     */\n\n    options = options || {};\n\n    if (!feedSlug || !userId) {\n      throw new errors.FeedError('Please provide a feed slug and user id, ie client.feed(\"user\", \"1\")');\n    }\n\n    if (feedSlug.indexOf(':') !== -1) {\n      throw new errors.FeedError('Please initialize the feed using client.feed(\"user\", \"1\") not client.feed(\"user:1\")');\n    }\n\n    utils.validateFeedSlug(feedSlug);\n    utils.validateUserId(userId);\n\n    // raise an error if there is no token\n    if (!this.apiSecret && !token) {\n      throw new errors.FeedError('Missing token, in client side mode please provide a feed secret');\n    }\n\n    // create the token in server side mode\n    if (this.apiSecret && !token) {\n      var feedId = '' + feedSlug + userId;\n      // use scoped token if read-only access is necessary\n      token = options.readOnly ? this.getReadOnlyToken(feedSlug, userId) : signing.sign(this.apiSecret, feedId);\n    }\n\n    var feed = new StreamFeed(this, feedSlug, userId, token, siteId);\n    return feed;\n  },\n\n  enrichUrl: function(relativeUrl) {\n    /**\n     * Combines the base url with version and the relative url\n     * @method enrichUrl\n     * @memberof StreamClient.prototype\n     * @private\n     * @param {string} relativeUrl\n     */\n    var url = this.baseUrl + this.version + '/' + relativeUrl;\n    return url;\n  },\n\n  enrichKwargs: function(kwargs) {\n    /**\n     * Adds the API key and the signature\n     * @method enrichKwargs\n     * @memberof StreamClient.prototype\n     * @param {object} kwargs\n     * @private\n     */\n    kwargs.url = this.enrichUrl(kwargs.url);\n    if (kwargs.qs === undefined) {\n      kwargs.qs = {};\n    }\n\n    kwargs.qs['api_key'] = this.apiKey;\n    kwargs.qs.location = this.group;\n    kwargs.json = true;\n    var signature = kwargs.signature || this.signature;\n    kwargs.headers = {};\n\n    // auto-detect authentication type and set HTTP headers accordingly\n    if (signing.isJWTSignature(signature)) {\n      kwargs.headers['stream-auth-type'] = 'jwt';\n      signature = signature.split(' ').reverse()[0];\n    } else {\n      kwargs.headers['stream-auth-type'] = 'simple';\n    }\n\n    kwargs.headers.Authorization = signature;\n    kwargs.headers['X-Stream-Client'] = this.userAgent();\n    return kwargs;\n  },\n\n  signActivity: function(activity) {\n    /**\n     * We automatically sign the to parameter when in server side mode\n     * @method signActivities\n     * @memberof StreamClient.prototype\n     * @private\n     * @param  {object}       [activity] Activity to sign\n     */\n    return this.signActivities([activity])[0];\n  },\n\n  signActivities: function(activities) {\n    /**\n     * We automatically sign the to parameter when in server side mode\n     * @method signActivities\n     * @memberof StreamClient.prototype\n     * @private\n     * @param {array} Activities\n     */\n    if (!this.apiSecret) {\n      return activities;\n    }\n\n    for (var i = 0; i < activities.length; i++) {\n      var activity = activities[i];\n      var to = activity.to || [];\n      var signedTo = [];\n      for (var j = 0; j < to.length; j++) {\n        var feedId = to[j];\n        var feedSlug = feedId.split(':')[0];\n        var userId = feedId.split(':')[1];\n        var token = this.feed(feedSlug, userId).token;\n        var signedFeed = feedId + ' ' + token;\n        signedTo.push(signedFeed);\n      }\n\n      activity.to = signedTo;\n    }\n\n    return activities;\n  },\n\n  getFayeAuthorization: function() {\n    /**\n     * Get the authorization middleware to use Faye with getstream.io\n     * @method getFayeAuthorization\n     * @memberof StreamClient.prototype\n     * @private\n     * @return {object} Faye authorization middleware\n     */\n    var apiKey = this.apiKey,\n        self = this;\n\n    return {\n      incoming: function(message, callback) {\n        callback(message);\n      },\n\n      outgoing: function(message, callback) {\n        if (message.subscription && self.subscriptions[message.subscription]) {\n          var subscription = self.subscriptions[message.subscription];\n\n          message.ext = {\n            'user_id': subscription.userId,\n            'api_key': apiKey,\n            'signature': subscription.token,\n          };\n        }\n\n        callback(message);\n      },\n    };\n  },\n\n  getFayeClient: function() {\n    /**\n     * Returns this client's current Faye client\n     * @method getFayeClient\n     * @memberof StreamClient.prototype\n     * @private\n     * @return {object} Faye client\n     */\n    if (this.fayeClient === null) {\n      this.fayeClient = new Faye.Client(this.fayeUrl);\n      var authExtension = this.getFayeAuthorization();\n      this.fayeClient.addExtension(authExtension);\n    }\n\n    return this.fayeClient;\n  },\n\n  get: function(kwargs, cb) {\n    /**\n     * Shorthand function for get request\n     * @method get\n     * @memberof StreamClient.prototype\n     * @private\n     * @param  {object}   kwargs\n     * @param  {requestCallback} cb     Callback to call on completion\n     * @return {Promise}                Promise object\n     */\n    return new Promise(function(fulfill, reject) {\n      this.send('request', 'get', kwargs, cb);\n      kwargs = this.enrichKwargs(kwargs);\n      kwargs.method = 'GET';\n      var callback = this.wrapPromiseTask(cb, fulfill, reject);\n      request(kwargs, callback);\n    }.bind(this));\n  },\n\n  post: function(kwargs, cb) {\n    /**\n     * Shorthand function for post request\n     * @method post\n     * @memberof StreamClient.prototype\n     * @private\n     * @param  {object}   kwargs\n     * @param  {requestCallback} cb     Callback to call on completion\n     * @return {Promise}                Promise object\n     */\n    return new Promise(function(fulfill, reject) {\n      this.send('request', 'post', kwargs, cb);\n      kwargs = this.enrichKwargs(kwargs);\n      kwargs.method = 'POST';\n      var callback = this.wrapPromiseTask(cb, fulfill, reject);\n      request(kwargs, callback);\n    }.bind(this));\n  },\n\n  delete: function(kwargs, cb) {\n    /**\n     * Shorthand function for delete request\n     * @method delete\n     * @memberof StreamClient.prototype\n     * @private\n     * @param  {object}   kwargs\n     * @param  {requestCallback} cb     Callback to call on completion\n     * @return {Promise}                Promise object\n     */\n    return new Promise(function(fulfill, reject) {\n      this.send('request', 'delete', kwargs, cb);\n      kwargs = this.enrichKwargs(kwargs);\n      kwargs.method = 'DELETE';\n      var callback = this.wrapPromiseTask(cb, fulfill, reject);\n      request(kwargs, callback);\n    }.bind(this));\n  },\n\n  updateActivities: function(activities, callback) {\n    /**\n     * Updates all supplied activities on the getstream-io api\n     * @since  3.1.0\n     * @param  {array} activities list of activities to update\n     * @return {Promise}\n     */\n    if (! (activities instanceof Array)) {\n      throw new TypeError('The activities argument should be an Array');\n    }\n\n    var authToken = signing.JWTScopeToken(this.apiSecret, 'activities', '*', { feedId: '*', expireTokens: this.expireTokens });\n\n    var data = {\n      activities: activities,\n    };\n\n    return this.post({\n      url: 'activities/',\n      body: data,\n      signature: authToken,\n    }, callback);\n  },\n  \n  updateActivity: function(activity) {\n    /**\n     * Updates one activity on the getstream-io api\n     * @since  3.1.0\n     * @param  {object} activity The activity to update\n     * @return {Promise}          \n     */\n     return this.updateActivities([activity]);\n  },\n\n};\n\nif (qs) {\n  StreamClient.prototype.createRedirectUrl = function(targetUrl, userId, events) {\n    /**\n     * Creates a redirect url for tracking the given events in the context of\n     * an email using Stream's analytics platform. Learn more at\n     * getstream.io/personalization\n     * @method createRedirectUrl\n     * @memberof StreamClient.prototype\n     * @param  {string} targetUrl Target url\n     * @param  {string} userId    User id to track\n     * @param  {array} events     List of events to track\n     * @return {string}           The redirect url\n     */    \n    var uri = url.parse(targetUrl);\n\n    if (!(uri.host || (uri.hostname && uri.port)) && !uri.isUnix) {\n      throw new errors.MissingSchemaError('Invalid URI: \"' + url.format(uri) + '\"');\n    }\n\n    var authToken = signing.JWTScopeToken(this.apiSecret, 'redirect_and_track', '*', { userId: userId, expireTokens: this.expireTokens });\n    var analyticsUrl = this.baseAnalyticsUrl + 'redirect/';\n    var kwargs = {\n      'auth_type': 'jwt',\n      'authorization': authToken,\n      'url': targetUrl,\n      'api_key': this.apiKey,\n      'events': JSON.stringify(events),\n    };\n\n    var qString = utils.rfc3986(qs.stringify(kwargs, null, null, {}));\n\n    return analyticsUrl + '?' + qString;\n  };\n}\n\n// If we are in a node environment and batchOperations is available add the methods to the prototype of StreamClient\nif (BatchOperations) {\n  for (var key in BatchOperations) {\n    if (BatchOperations.hasOwnProperty(key)) {\n      StreamClient.prototype[key] = BatchOperations[key];\n    }\n  }\n}\n\nmodule.exports = StreamClient;"
    },
    "params": [
      {
        "title": "param",
        "description": null,
        "lineNumber": 2,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "object"
          }
        },
        "name": "errors"
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "response"
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "body"
      }
    ],
    "name": "StreamClient",
    "kind": "function",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "StreamClient"
    ]
  },
  {
    "description": "",
    "tags": [
      {
        "title": "module",
        "description": null,
        "lineNumber": 1,
        "type": null,
        "name": "stream"
      },
      {
        "title": "author",
        "description": "Thierry Schellenbach\nBSD License",
        "lineNumber": 2
      },
      {
        "title": "name",
        "name": "StreamClient"
      },
      {
        "title": "kind",
        "kind": "module"
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 5,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 6,
          "column": 43
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/getstream.js",
      "code": "var StreamClient = require('./lib/client');\nvar errors = require('./lib/errors');\nvar request = require('request');\n\nfunction connect(apiKey, apiSecret, appId, options) {\n  /**\n   * Create StreamClient\n   * @method connect\n   * @param  {string} apiKey    API key\n   * @param  {string} [apiSecret] API secret (only use this on the server)\n   * @param  {string} [appId]     Application identifier\n   * @param  {object} [options]   Additional options\n   * @param  {string} [options.location] Datacenter location\n   * @return {StreamClient}     StreamClient\n   * @example <caption>Basic usage</caption>\n   * stream.connect(apiKey, apiSecret);\n   * @example <caption>or if you want to be able to subscribe and listen</caption>\n   * stream.connect(apiKey, apiSecret, appId);\n   * @example <caption>or on Heroku</caption>\n   * stream.connect(streamURL);\n   * @example <caption>where streamURL looks like</caption>\n   * \"https://thierry:pass@gestream.io/?app=1\"\n   */\n  if (typeof (process) !== 'undefined' && process.env.STREAM_URL && !apiKey) {\n    var parts = /https\\:\\/\\/(\\w+)\\:(\\w+)\\@([\\w-]*).*\\?app_id=(\\d+)/.exec(process.env.STREAM_URL);\n    apiKey = parts[1];\n    apiSecret = parts[2];\n    var location = parts[3];\n    appId = parts[4];\n    if (options === undefined) {\n      options = {};\n    }\n\n    if (location !== 'getstream') {\n      options.location = location;\n    }\n  }\n\n  return new StreamClient(apiKey, apiSecret, appId, options);\n}\n\nmodule.exports.connect = connect;\nmodule.exports.errors = errors;\nmodule.exports.request = request;\nmodule.exports.Client = StreamClient;"
    },
    "name": "StreamClient",
    "kind": "module",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "StreamClient"
    ]
  },
  {
    "description": "Client to connect to Stream api",
    "tags": [
      {
        "title": "class",
        "description": null,
        "lineNumber": 2,
        "type": null,
        "name": "StreamClient"
      },
      {
        "title": "name",
        "name": "StreamClient"
      },
      {
        "title": "kind",
        "kind": "class"
      }
    ],
    "loc": {
      "start": {
        "line": 20,
        "column": 2
      },
      "end": {
        "line": 23,
        "column": 5
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 24,
          "column": 2
        },
        "end": {
          "line": 24,
          "column": 41
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/client.js",
      "code": "{\n  /**\n   * Client to connect to Stream api\n   * @class StreamClient\n   */\n  this.initialize.apply(this, arguments);\n}"
    },
    "name": "StreamClient",
    "kind": "class",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "StreamClient"
    ]
  },
  {
    "description": "Manage api calls for specific feeds\nThe feed object contains convenience functions such add activity, remove activity etc",
    "tags": [
      {
        "title": "class",
        "description": null,
        "lineNumber": 3,
        "type": null,
        "name": "StreamFeed"
      },
      {
        "title": "name",
        "name": "StreamFeed"
      },
      {
        "title": "kind",
        "kind": "class"
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 2
      },
      "end": {
        "line": 9,
        "column": 5
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 10,
          "column": 2
        },
        "end": {
          "line": 10,
          "column": 41
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/feed.js",
      "code": "{\n  /**\n   * Manage api calls for specific feeds\n   * The feed object contains convenience functions such add activity, remove activity etc\n   * @class StreamFeed\n   */\n  this.initialize.apply(this, arguments);\n}"
    },
    "name": "StreamFeed",
    "kind": "class",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "StreamFeed"
    ]
  },
  {
    "description": "Updates one activity on the getstream-io api",
    "tags": [
      {
        "title": "since",
        "description": "3.1.0",
        "lineNumber": 2
      },
      {
        "title": "param",
        "description": "The activity to update",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "activity"
      },
      {
        "title": "returns",
        "description": null,
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      },
      {
        "title": "name",
        "name": "updateActivities"
      }
    ],
    "loc": {
      "start": {
        "line": 491,
        "column": 4
      },
      "end": {
        "line": 496,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 497,
          "column": 5
        },
        "end": {
          "line": 497,
          "column": 46
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/client.js",
      "code": "{\n    /**\n     * Updates one activity on the getstream-io api\n     * @since  3.1.0\n     * @param  {object} activity The activity to update\n     * @return {Promise}          \n     */\n     return this.updateActivities([activity]);\n  }"
    },
    "params": [
      {
        "title": "param",
        "description": "The activity to update",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "activity"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": null,
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      }
    ],
    "name": "updateActivities",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "updateActivities"
    ]
  },
  {
    "description": "Creates a redirect url for tracking the given events in the context of\nan email using Stream's analytics platform. Learn more at\ngetstream.io/personalization",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 4,
        "name": "createRedirectUrl"
      },
      {
        "title": "memberof",
        "description": "StreamClient.prototype",
        "lineNumber": 5
      },
      {
        "title": "param",
        "description": "Target url",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "targetUrl"
      },
      {
        "title": "param",
        "description": "User id to track",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "userId"
      },
      {
        "title": "param",
        "description": "List of events to track",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "array"
        },
        "name": "events"
      },
      {
        "title": "returns",
        "description": "The redirect url",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "title": "name",
        "name": "uri"
      }
    ],
    "loc": {
      "start": {
        "line": 504,
        "column": 4
      },
      "end": {
        "line": 514,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 515,
          "column": 4
        },
        "end": {
          "line": 515,
          "column": 35
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/client.js",
      "code": "{\n    /**\n     * Creates a redirect url for tracking the given events in the context of\n     * an email using Stream's analytics platform. Learn more at\n     * getstream.io/personalization\n     * @method createRedirectUrl\n     * @memberof StreamClient.prototype\n     * @param  {string} targetUrl Target url\n     * @param  {string} userId    User id to track\n     * @param  {array} events     List of events to track\n     * @return {string}           The redirect url\n     */    \n    var uri = url.parse(targetUrl);\n\n    if (!(uri.host || (uri.hostname && uri.port)) && !uri.isUnix) {\n      throw new errors.MissingSchemaError('Invalid URI: \"' + url.format(uri) + '\"');\n    }\n\n    var authToken = signing.JWTScopeToken(this.apiSecret, 'redirect_and_track', '*', { userId: userId, expireTokens: this.expireTokens });\n    var analyticsUrl = this.baseAnalyticsUrl + 'redirect/';\n    var kwargs = {\n      'auth_type': 'jwt',\n      'authorization': authToken,\n      'url': targetUrl,\n      'api_key': this.apiKey,\n      'events': JSON.stringify(events),\n    };\n\n    var qString = utils.rfc3986(qs.stringify(kwargs, null, null, {}));\n\n    return analyticsUrl + '?' + qString;\n  }"
    },
    "memberof": "StreamClient.prototype",
    "params": [
      {
        "title": "param",
        "description": "Target url",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "targetUrl"
      },
      {
        "title": "param",
        "description": "User id to track",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "userId"
      },
      {
        "title": "param",
        "description": "List of events to track",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "array"
        },
        "name": "events"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "The redirect url",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "name": "uri",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "uri"
    ]
  },
  {
    "description": "Follows the given target feed",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 2,
        "name": "follow"
      },
      {
        "title": "memberof",
        "description": "StreamFeed.prototype",
        "lineNumber": 3
      },
      {
        "title": "param",
        "description": "Slug of the target feed",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "targetSlug"
      },
      {
        "title": "param",
        "description": "User identifier of the target feed",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "targetUserId"
      },
      {
        "title": "param",
        "description": "Additional options",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "options",
        "properties": [
          {
            "title": "param",
            "description": "Limit the amount of activities copied over on follow",
            "lineNumber": 7,
            "type": {
              "type": "NameExpression",
              "name": "number"
            },
            "name": "options.activityCopyLimit"
          }
        ]
      },
      {
        "title": "param",
        "description": "Limit the amount of activities copied over on follow",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "options.activityCopyLimit"
      },
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "requestCallback"
        },
        "name": "callback"
      },
      {
        "title": "returns",
        "description": "Promise object",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      },
      {
        "title": "example",
        "description": "feed.follow('user', '1');",
        "lineNumber": 10
      },
      {
        "title": "example",
        "description": "feed.follow('user', '1', callback);",
        "lineNumber": 11
      },
      {
        "title": "example",
        "description": "feed.follow('user', '1', options, callback);",
        "lineNumber": 12
      },
      {
        "title": "name",
        "name": "validateFeedSlug"
      }
    ],
    "loc": {
      "start": {
        "line": 105,
        "column": 4
      },
      "end": {
        "line": 118,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 119,
          "column": 4
        },
        "end": {
          "line": 119,
          "column": 39
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/feed.js",
      "code": "{\n    /**\n     * Follows the given target feed\n     * @method follow\n     * @memberof StreamFeed.prototype\n     * @param  {string}   targetSlug   Slug of the target feed\n     * @param  {string}   targetUserId User identifier of the target feed\n     * @param  {object}   options      Additional options\n     * @param  {number}   options.activityCopyLimit Limit the amount of activities copied over on follow\n     * @param  {requestCallback} callback     Callback to call on completion\n     * @return {Promise}  Promise object\n     * @example feed.follow('user', '1');\n     * @example feed.follow('user', '1', callback);\n     * @example feed.follow('user', '1', options, callback);\n     */\n    utils.validateFeedSlug(targetSlug);\n    utils.validateUserId(targetUserId);\n\n    var activityCopyLimit;\n    var last = arguments[arguments.length - 1];\n    // callback is always the last argument\n    callback = (last.call) ? last : undefined;\n    var target = targetSlug + ':' + targetUserId;\n\n    // check for additional options\n    if (options && !options.call) {\n      if (options.limit) {\n        activityCopyLimit = options.limit;\n      }\n    }\n\n    var body = {\n      target: target,\n    };\n\n    if (activityCopyLimit) {\n      body['activity_copy_limit'] = activityCopyLimit;\n    }\n\n    return this.client.post({\n      url: 'feed/' + this.feedUrl + '/following/',\n      body: body,\n      signature: this.signature,\n    }, callback);\n  }"
    },
    "memberof": "StreamFeed.prototype",
    "params": [
      {
        "title": "param",
        "description": "Slug of the target feed",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "targetSlug"
      },
      {
        "title": "param",
        "description": "User identifier of the target feed",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "targetUserId"
      },
      {
        "title": "param",
        "description": "Additional options",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "object"
        },
        "name": "options",
        "properties": [
          {
            "title": "param",
            "description": "Limit the amount of activities copied over on follow",
            "lineNumber": 7,
            "type": {
              "type": "NameExpression",
              "name": "number"
            },
            "name": "options.activityCopyLimit"
          }
        ]
      },
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "requestCallback"
        },
        "name": "callback"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "Promise object",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "Promise"
        }
      }
    ],
    "examples": [
      "feed.follow(<span class=\"hljs-string\">'user'</span>, <span class=\"hljs-string\">'1'</span>);",
      "feed.follow(<span class=\"hljs-string\">'user'</span>, <span class=\"hljs-string\">'1'</span>, callback);",
      "feed.follow(<span class=\"hljs-string\">'user'</span>, <span class=\"hljs-string\">'1'</span>, options, callback);"
    ],
    "name": "validateFeedSlug",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "validateFeedSlug"
    ]
  },
  {
    "description": "Unfollow the given feed",
    "tags": [
      {
        "title": "function",
        "description": null,
        "lineNumber": 2,
        "name": "unfollow"
      },
      {
        "title": "memberof",
        "description": "StreamFeed.prototype",
        "lineNumber": 3
      },
      {
        "title": "param",
        "description": "Slug of the target feed",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "targetSlug"
      },
      {
        "title": "param",
        "description": "[description]",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "targetUserId"
      },
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "requestCallback"
        },
        "name": "callback"
      },
      {
        "title": "returns",
        "description": "XHR request object",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "title": "example",
        "description": "feed.unfollow('user', '2', callback);",
        "lineNumber": 8
      },
      {
        "title": "name",
        "name": "validateFeedSlug"
      }
    ],
    "loc": {
      "start": {
        "line": 151,
        "column": 4
      },
      "end": {
        "line": 160,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 161,
          "column": 4
        },
        "end": {
          "line": 161,
          "column": 39
        }
      },
      "file": "/Users/matthisk/Repositories/stream-js/src/lib/feed.js",
      "code": "{\n    /**\n     * Unfollow the given feed\n     * @method unfollow\n     * @memberof StreamFeed.prototype\n     * @param  {string}   targetSlug   Slug of the target feed\n     * @param  {string}   targetUserId [description]\n     * @param  {requestCallback} callback     Callback to call on completion\n     * @return {object}                XHR request object\n     * @example feed.unfollow('user', '2', callback);\n     */\n    utils.validateFeedSlug(targetSlug);\n    utils.validateUserId(targetUserId);\n    var targetFeedId = targetSlug + ':' + targetUserId;\n    var xhr = this.client.delete({\n      url: 'feed/' + this.feedUrl + '/following/' + targetFeedId + '/',\n      signature: this.signature,\n    }, callback);\n    return xhr;\n  }"
    },
    "memberof": "StreamFeed.prototype",
    "params": [
      {
        "title": "param",
        "description": "Slug of the target feed",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "targetSlug"
      },
      {
        "title": "param",
        "description": "[description]",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "targetUserId"
      },
      {
        "title": "param",
        "description": "Callback to call on completion",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "requestCallback"
        },
        "name": "callback"
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": "XHR request object",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "examples": [
      "feed.unfollow(<span class=\"hljs-string\">'user'</span>, <span class=\"hljs-string\">'2'</span>, callback);"
    ],
    "name": "validateFeedSlug",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "validateFeedSlug"
    ]
  }
]